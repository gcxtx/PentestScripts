#!/usr/bin/env python
#
# proxyVulnHunter.py
# Proactively find web servers which may proxy to enter the intranet due to wrong configuration, especially nginx servers
#
# Case:
#	1. https://sites.google.com/site/testsitehacking/10k-host-header
#	2. https://mp.weixin.qq.com/s/EtUmfMxxJjYNl7nIOKkRmA
#	3. http://wy.daochuan.net/bug_detail.php?wybug_id=wooyun-2015-0131169
#	4. http://www.secevery.com:4321/bugs/wooyun-2014-083202
#	5. http://wooyun.jozxing.cc/static/bugs/wooyun-2016-0191121.html
# More:
#   https://github.com/WyAtu/PentestScripts/proxyVulnHunter/blob/master/README.md
#

import sys
import json
import Queue
import socket
import requests
import argparse
import threading
from netaddr import IPNetwork

timeout = 3
mutex = threading.Lock()
result = []
web_port = list(set([80, 81, 82, 85, 89, 90, 443, 8000, 8001, 8002, 8008, 8080, 8081, 8082, 8088, 8090, 8100, 8108, 8200, 8888, 9000]))

def get_ip():
    url = "http://ip.360.cn/IPShare/info"
    try:
        req = requests.get(url, timeout=timeout)
        req_json = json.loads(req.content)
        return req_json['ip']
    except:
        sys.exit("[-] Can't get ip")

def get_ip_by_proxy(proxy):
    url = "http://ip.360.cn/IPShare/info"
    proxies = {'http': 'http://'+proxy, 'https': 'https://'+proxy}
    try:
        req = requests.get(url, proxies=proxies, timeout=timeout)
        req_json = json.loads(req.content)
        return req_json['ip']
    except:
        return get_ip()

def get_target_from_file(filename):
    target = []
    try:
        fp = open(filename, 'r+')
        for i in fp.readlines():
            if i.strip() != "": target.append(i.strip())
        fp.close()
        return target
    except:
        sys.exit('[-] Load file error')

def format_ip_dict(ip_dict):
    for target, ip in ip_dict.items():
        if isinstance(ip, list):
            map(lambda x: q.put(x), [target+'--'+i for i in ip])
        else:
            q.put(target+'--'+ip)

def format_input(target):
    target_re = target.replace('http://', '').replace('https://', '').rstrip('/')
    try:
        if args.port == False:
            ip_list = [ip.format() for ip in IPNetwork(target_re)]
        else:
            ip_list = sum(([[ip+':'+str(port) if ':' not in ip else ip_list.append(ip) for port in web_port] for ip in [ip.format() for ip in IPNetwork(target_re)]]), [])
    except:
        try:
            url, port = target_re.split(':')
            ip = socket.gethostbyname(url)
            ip_list = ip+':'+port
        except:
            try:
                ip = socket.gethostbyname(target_re)
                if args.port == True and ':' not in ip:
                    ip_list = [ip+':'+str(port) for port in web_port]
                else:
                    ip_list = ip
            except:
                ip_list = ""
    return {target : ip_list}

def checker():
    while not q.empty():
        try:
            target, ip = q.get().split('--')
            result_print = "[*] %s--%s is not proxy"%(target, ip) if ip == "" or get_ip() == get_ip_by_proxy(ip) \
            else "[+] %s--%s is a proxy"%(target, ip)
            mutex.acquire()
            print result_print
            if '[+]' in result_print:
                try:
                    fp.writelines(target+'--'+ip+'\n')
                    fp.flush()
                except:
                    pass
                result.append(target+'--'+ip)
            mutex.release()
        except:
            pass
        finally:
            q.task_done()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='%s'%(sys.argv[0]))
    exptypegroup = parser.add_mutually_exclusive_group()
    exptypegroup.add_argument('-t', '--target', type=str, nargs='+', help="target IP/URL/CIDR")
    exptypegroup.add_argument('-f', '--file', type=str, help="target file")
    parser.add_argument('-p', '--port', action='store_true', help="use default ports for the target without port")
    parser.add_argument('-o', '--output', type=str, help="output file")
    parser.add_argument('-T', '--thread', type=int, default=100, help="thread, default: 100")
    args = parser.parse_args()

    if len(sys.argv) < 2:
        sys.exit(parser.print_help())
    if args.target == None and args.file == None:
        sys.exit('[-] use -t/--target or -f/--file to set target, -h to show help')

    target = get_target_from_file(args.file) if args.file != None else args.target

    if args.output != None:
        try:
            fp = open(args.output, 'a+')
        except:
            sys.exit('[-] open output file failed')

    ip_dict_list = map(format_input, target)

    q = Queue.Queue()
    map(format_ip_dict, ip_dict_list)

    threads = [threading.Thread(target=checker) for i in range(args.thread)]
    map(lambda x: x.start(), threads)
    q.join()
    map(lambda x: sys.stdout.write(x+'\n'), result)
    try:
        fp.close()
    except:
        pass
